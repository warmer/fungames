<% if defined?(game) and game and game[:game_detail] and game[:game_detail][:xy] %>
  <div id="gamespace">
    <h1></h1>
    <table id="game_board" class="table_game_board"></table>
    <p id="players"></p>
    <div id="details"></div>
  </div>
  <script>
    var clicked = false;
    var csrfToken = "<%= session[:csrf] %>";
    var lastBoardString = "";

    function queryStatus() {
      $.getJSON("<%= url(:full_game_details, id: game[:id]) %>", function(data) {
        updateBoard(data.board, data.game);
      });
    }

    // update the state of the world every 3 seconds at first
    var updateIntervalSec = 3;
    var updateIntervalID = setInterval(queryStatus, updateIntervalSec * 1000);

    queryStatus();

    function updateBoard(board, game) {
      function glow(item, cls, set) { d3.select(item).classed(cls, set) }
      function glowVirt(col, i, end, cls, set) {
        while(i++ <= end) { glow('#block-' + col + '-' + (i-1), cls, set) }
      }
      function glowHoriz(row, i, end, cls, set) {
        while(i++ <= end) { glow('#block-' + (i-1) + '-' + row, cls, set) }
      }
      function edgeGlow(ref, piece, col, playerIndex, isSet) {
        var cls = "glow" + playerIndex;
        switch(piece.cell.type) {
          case 'topmove':
            glowVirt(col - 1, 0, piece.cell.offset, cls, isSet);
            break;
          case 'botmove':
            glowVirt(col - 1, piece.cell.offset, board.height, cls, isSet);
            break;
          case 'leftmove':
            glowHoriz(piece.row - 1, 0, piece.cell.offset, cls, isSet);
            break;
          case 'rightmove':
            glowHoriz(piece.row - 1, piece.cell.offset, board.width, cls, isSet);
            break;
          default: break;
        }
        glow(ref, "edge-" + cls, isSet);
      }

      function makeMove(piece, index) {
        var x, y = null;
        switch(piece.cell.type) {
          case 'topmove':
            x = index - 1;
            y = piece.cell.offset;
            break;
          case 'botmove':
            x = index - 1;
            y = piece.cell.offset;
            break;
          case 'leftmove':
            x = piece.cell.offset;
            y = piece.row - 1;
            break;
          case 'rightmove':
            x = piece.cell.offset;
            y = piece.row - 1;
            break;
          default: break;
        }
        if(x >= 0 && x < board.width && y >= 0 && y < board.height) {
          var data = {x: x, y: y, game_id: game.id, csrf_token: csrfToken };
          $.post("<%= url(:make_move) %>", data)
            .done(function(res) {
              res = $.parseJSON(res);
              csrfToken = res.csrf;
            })
            .fail(function(res) {
              console.log("Fail!");
              console.log(res);
              location.reload();
            })
            .always(function(res) {
              updateIntervalSec = 3;
              updateIntervalID = setInterval(queryStatus, updateIntervalSec * 1000);
            });
        }
      }
      var player = <%= session[:user_id] || 0 %>;
      var turn = game.turn;
      clicked = false;

      var header = d3.select("#gamespace").selectAll("h1")
        .data([game.players[turn]]);
      header.enter().append("h1");
      header.attr("class", "turn-" + turn);

      // is the game over?
      if(game.status != 0) {
        switch(game.status) {
          case 1:
            header.text("Stalemate!");
            break;
          case 2:
            header.text(game.players[turn].name + " won!");
            break;
          default:
            header.text("Game over!");
            break;
        }
        turn = -1;
        // don't continue updating the board if the game is over
        window.clearInterval(updateIntervalID)
      }
      else {
        header.text("Current turn: " + game.players[turn].name);
      }
      // don't update anything if nothing has changed
      if(board.board_string == lastBoardString) {
        // slow the rate at which we check for updated boards
        if(updateIntervalSec < 15) {
          updateIntervalSec++;
        }
        // clear the existing interval and create a new one
        window.clearInterval(updateIntervalID);
        updateIntervalID = setInterval(queryStatus, updateIntervalSec * 1000);
        return;
      }
      lastBoardString = board.board_string;

      var player_ids = game.players.map(function(p) { return p.id; });

      var playerTurn = (player == player_ids[turn]);
      // don't poll for new moves when it's OUR turn
      if(playerTurn) {
        window.clearInterval(updateIntervalID);
      }

      var topRowData = game.game_detail.move_depth.top.map(function(p) {
        return {'offset': p, 'type': 'topmove'};
      });
      var bottomRowData = game.game_detail.move_depth.bottom.map(function(p) {
        return {'offset': p, 'type': 'botmove'};
      });
      // add the top-right corner
      topRowData.push({'type': 'corner'});
      // add the top-left corner
      topRowData = [{'type': 'corner'}].concat(topRowData);
      // add the bottom-right corner
      bottomRowData.push({'type': 'corner'});
      // add the bottom-left corner
      bottomRowData = [{'type': 'corner'}].concat(bottomRowData);

      var xyData = game.game_detail.xy.map(function(row, rowIdx) {
        var newRow = row.map(function(p) { return {'type': 'block', 'value': p}});
        // add the left side
        newRow = [{'type': 'leftmove', 'offset': game.game_detail.move_depth.left[rowIdx]}]
          .concat(newRow);
        newRow.push({'type': 'rightmove', 'offset': game.game_detail.move_depth.right[rowIdx]});
        return newRow;
      });
      xyData = [topRowData].concat(xyData);
      xyData.push(bottomRowData);

      var tbody = d3.select("#game_board").selectAll("tbody")
            .data(function() { return [xyData];});

      tbody.enter().append("tbody");

      var rows = tbody.selectAll("tr")
          .data(function(d) { return d; });
      rows.enter().append("tr");

      var blockData = rows.selectAll("td")
          .data(function(d, idx) { return d.map(function(col) {
              return {'cell': col, 'row': idx};
            });
          })
      blockData
        .enter()
        .append("td");
      blockData
          .attr("class", function(d) {
            var c = d.cell.type + " board_block"
            if(d.cell.type == 'block') { c += " piece-" + (d.cell.value & 0x07)}
            return c;
          })
          .attr("id", function(d, i) {
            return d.cell.type + "-" + (i - 1) + "-" + (d.row - 1);
          })
          .on("mouseover", function(d, i) {
            if(playerTurn && d.cell.offset != undefined && !clicked) {
              edgeGlow(this, d, i, player_ids.indexOf(player), true);
            }
          })
          .on("mouseout", function(d, i) {
            if(playerTurn && d.cell.offset != undefined) {
              edgeGlow(this, d, i, player_ids.indexOf(player), false);
            }
          })
          .on("click", function(d, i) {
            if(playerTurn && d.cell.offset != undefined && !clicked) {
              makeMove(d, i);
              queryStatus();
            }
          });

      var subtitle = d3.select("#gamespace").selectAll("#players")
        .data([game.players]);
      subtitle.enter().append("p")
      subtitle
        .each(function(players) {
          d3.select(this).append("a")
            .attr("href", "<%= url(:player, id: '') %>" + players[0].id)
            .attr("class", "turn-0")
            .text(players[0].name);
          d3.select(this).append("span")
            .text(" vs ");
          d3.select(this).append("a")
            .attr("href", "<%= url(:player, id: '') %>" + players[1].id)
            .attr("class", "turn-1")
            .text(players[1].name);
        });

      var gameDetails = d3.select("#gamespace").selectAll("#details")
        .data([game.moves]);
      gameDetails.enter().append("div")
      gameDetails
        .each(function(moves) {
          d3.select(this).append("p")
            .text(moves.length + " total moves");

        });

    } // END updateBoard
  </script>
<% end %>
